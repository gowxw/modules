以下测试均在centos下进行。

1:主动发起关闭的一方（服务器，客户端都有可能主动发起关闭），状态转换是ESTABLISHED--->FIN_WAIT1--->FIN_WAIT2--->TIME_WAIT
2:被动关闭的一方，状态转换是  ESTABLISHED--->CLOSE_WAIT--->LAST_ACK--->CLOSE
3:无论是主动发起方，还是被动发起方都需要调用socket.close(),否则会有半连接状态的出现，属于程序bug。
4:双方都正常关闭的情况下:
  server端先关闭，客户端再关闭的话，会留存大量的TIME_WAIT,一个connect 会留一个。
  如果此时把server程序关闭，再重启，会出现"Address already in use"的错误，
  可以把listen的socket设置 sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)，避免此现象


server端程序
###########################################################
import socket
import time
ADDR = ("",9999)
sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
#设置此标志位，防止"Address already in use"的错误
sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
sock.bind(ADDR)
sock.listen(5)
while True:
    client,addr = sock.accept()
    print client    
    data = client.recv(1024)
    client.send(data)
    time.sleep(1)
    client.close()

###########################################################




client端程序
###########################################################
import socket,time
ADDR=("10.1.3.100",9999)
sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)

try:
    sock.connect(ADDR)
    sock.send("abcdefghi")
    received = sock.recv(1024)
finally:
    time.sleep(5)
    sock.close()
    
print received
###########################################################

1)关于TIME_WAIT
server端关闭socket之前sleep(1)，client端关闭socket前sleep(5)，这样做是让server端先关闭，client端后关闭
这样在server关闭后，client端关闭前有一段时间可以观察到 server端的FIN_WAIT的状态，client端的CLOSE_WAIT
状态。

最后都关闭后在server端观察到了TIME_WAIT状态， 此状态持续1分钟左右（2msl，跟平台有关）

如果有大量的client并发连接server，当server端积累了大量的TIME_WAIT时，会影响服务器的性能，
可以设置 tcp_tw_reuse tcp_tw_recycle 两个参数为1，可以看到TIME_WAIT状态稍纵即逝。。。 






2)关于FIN_WAIT2超时：
由于某种原因，主动关闭的一方发送了close，而被动关闭的一方的程序没有执行close，且程序没有退出

server端的程序不变，client 端的例子稍作改动
import socket,time
ADDR=("10.1.3.100",9999)
sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)

try:
    sock.connect(ADDR)
    sock.send("abcdefghi")
    received = sock.recv(1024)
finally:
    time.sleep(100)##多sleep一段时间，等待server端FIN_WAIT2超时
    #sock.close()
    pass

FIN_WAIT2超时后server端直接进入CLOSED状态了，client端会完成CLOSE_WAIT--->LAST_ACK状态转换，而此时server端已经关闭了，不会再发送最后一个ack报文了，所以client端会一直处于LAST_ACK状态，直到LAST_ACK超时到CLOSED

如果在server端FIN_WAIT2之前，client端在sleep(100)的过程中执行了ctrl-c，也相当于发送了close，server端会从FIN_WAIT2转换到TIME_WAIT状态，与正常关闭无异




3)关于CLOSE_WAIT:
修改客户端的代入如下：
import socket,time
ADDR=("10.1.3.100",9999)
sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)

try:
    sock.connect(ADDR)
    sock.send("abcdefghi")
    received = sock.recv(1024)
finally:
    print 'here'
    time.sleep(1000000)#长时间sleep，不退出
    #sock.close()
    pass

客户端的程序长时间sleep，不退出，他一直处于CLOSE_WAIT状态，执行ctrl-c，相当于系统执行了close，这时候tcp的状态由
CLOSE_WAIT 转换到 LAST_ACK，最后超时关闭


如果client端恶意不关闭，或者由于存在bug，CLOSE_WAIT会一直存在，过多的client造成的CLOSE_WAIT（例如爬虫），会造成系统负载
再一次修改client端代码，增加tcp keepalive的参数

import socket,time
ADDR=("10.1.3.100",9999)
sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)

sock.setsockopt(socket.SOL_SOCKET,socket.SO_KEEPALIVE,1)
sock.setsockopt(socket.SOL_TCP,socket.TCP_KEEPIDLE,100)
sock.setsockopt(socket.SOL_TCP,socket.TCP_KEEPCNT,3)
sock.setsockopt(socket.SOL_TCP,socket.TCP_KEEPINTVL,20)

try:
    sock.connect(ADDR)
    sock.send("abcdefghi")
    received = sock.recv(1024)
finally:
    print 'here'
    time.sleep(1000000)
    #sock.close()
    pass
#print received

可以发现过了一段时间，处于CLOSE_WAIT的socket转换到CLOSED，
理论上这段时间应该是socket.TCP_KEEPIDLE＋socket.TCP_KEEPCNT*socket.TCP_KEEPINTVL





4)关于tcp_keepalive
tcp_keepalive_time:连接空闲多久后开始发送keepalive 探测报文，开始发送keepalive探测报文之后，这个参数就没用了
tcp_keepalive_intvl:keepalive探测报文发生间隔
tcp_keepalive_probes:发送多少个探测报文且没有回应，认为这个tcp链接已经断了

下面的代码片段可以设置相关的参数 
val=1
setsockopt(fd, SOL_SOCKET, SO_KEEPALIVE, &val, sizeof(val)) 

如果不改变系统内核的参数，手动设置以下的值，也可以起到三个参数值的修改，但是这个修改仅适用于本socket
代码来自于https://www.cnblogs.com/cobbliu/p/4655542.html
    /* Send first probe after `interval' seconds. */
    val = interval;
    if (setsockopt(fd, IPPROTO_TCP, TCP_KEEPIDLE, &val, sizeof(val)) < 0) {
        printf("setsockopt TCP_KEEPIDLE: %s\n", strerror(errno));
        return -1;
    }

    /* Send next probes after the specified interval. Note that we set the
     * delay as interval / 3, as we send three probes before detecting
     * an error (see the next setsockopt call). */
    val = interval/3;
    if (val == 0) val = 1;
    if (setsockopt(fd, IPPROTO_TCP, TCP_KEEPINTVL, &val, sizeof(val)) < 0) {
        printf("setsockopt TCP_KEEPINTVL: %s\n", strerror(errno));
        return -1;
    }

    /* Consider the socket in error state after three we send three ACK
     * probes without getting a reply. */
    val = 3;
    if (setsockopt(fd, IPPROTO_TCP, TCP_KEEPCNT, &val, sizeof(val)) < 0) {
        printf("setsockopt TCP_KEEPCNT: %s\n", strerror(errno));
        return -1;
    }





关于time_wait回收与重用： http://blog.csdn.net/dog250/article/details/13760985
http://www.centoscn.com/CentOS/Intermediate/2014/0318/2594.html
https://www.cnblogs.com/sunxucool/p/3449068.html
关于FIN_WAIT2超时处理，平台操作系统不同，处理方式不同：https://www.cnblogs.com/zengkefu/p/5655016.html
关于tcp keepalive 参数：http://www.tldp.org/HOWTO/html_single/TCP-Keepalive-HOWTO/
                        https://www.cnblogs.com/cobbliu/p/4655542.html
